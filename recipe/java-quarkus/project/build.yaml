---
app_icon: quarkus

env:
  APP_NAME: app

input:
  var:
    - name: GIT_URI
      description: the URI of the project git repository
      required: true
      type: uri

    - name: SONAR_URI
      description: the URI of the SonarQube server to use for code quality reporting
      required: true
      type: uri

    - name: SONAR_PROJECT_KEY
      description: the unique key identifying the project in the SonarQube server
      required: true
      type: string

    - name: SONAR_SOURCES
      description: the path the sonar scanner should use to scan source code
      required: true
      type: path
      default: src/

    - name: SONAR_BINARIES
      description: the path the sonar scanner should use to scan binary files
      required: true
      type: path
      default: target/classes

    - name: APP_PACKAGE_NAME
      description: the name:tag for the application package to be published (e.g. registry-host/app-group/app-name)
      required: true
      type: name

    - name: PROJECT_GROUP_ID
      description: the maven group id for the project
      required: true
      type: string

    - name: PROJECT_ARTIFACT_ID
      description: the maven artifact id for the application
      required: true
      type: string

    - name: PROJECT_ARTIFACT_VERSION
      description: the version of the application artifact
      required: true
      type: string
      default: 0.0.1

    # env variables required by build-image function
    - name: BC_APPLICATION_NAME
      description: the openshift application name
      required: true
      type: string
    - name: BC_BUILDER_IMAGE
      description: the image builder name (buildah image)
      required: true
      type: string
    - name: BC_PUSH_IMAGE_REGISTRY
      description: the image registry name (eg. registry.gitlab.com)
      required: true
      type: string
    - name: BC_PUSH_IMAGE_REPO
      description: the image repo name (eg. sap7)
      required: true
      type: string
    - name: BC_PUSH_IMAGE_NAME
      description: the application image name
      required: true
      type: string
    - name: BC_PUSH_IMAGE_VERSION
      description: the application image version/tag
      required: true
      type: string
    - name: BC_PULL_IMAGE_REGISTRY
      description: application runtime image registry name (eg. registry.gitlab.com)
      required: true
      type: string
    - name: BC_PACKAGE_NAME
      description: the name for the application package that will be downloaded (e.g. registry-host/app-group/app-name)
      required: true
      type: string
    - name: BC_FX_NAME
      description: the function name to build image (eg. build-image)
      required: true
      type: string
    - name: BC_CRYPTO_KEY_EMAIL
      description: the email id which is used to genearte crypto signature keys
      required: true
      type: string
    - name: GIT_REPO_EMAIL
      description: git user email id to push the code
      required: true
      type: string
    - name: GIT_REPO_HOST
      description: git host to push the code (eg. gitlab.com)
      required: true
      type: string

  secret:
    - name: ART_REG_USER
      description: the artisan registry user
    - name: ART_REG_PWD
      description: the artisan registry password
    - name: SONAR_TOKEN
      description: the token to access the Sonar server
    - name: BC_PULL_IMAGE_REGISTRY_UNAME
      description: user name for the container registry where the base image is located
      aggregate: true
      type: string
    - name: BC_PULL_IMAGE_REGISTRY_PWD
      description: password for the container registry where the base image is located
      aggregate: true
    - name: BC_PUSH_IMAGE_REGISTRY_UNAME
      description: user name for the container registry where the application image will be pushed
      aggregate: true
      type: string
    - name: BC_PUSH_IMAGE_REGISTRY_PWD
      description: password for the container registry where the application image will be pushed
      aggregate: true
    - name: BC_ART_REG_USER
      description: artefact registry user name
      aggregate: true
      type: string
    - name: BC_ART_REG_PWD
      description: artefact registry user password
      aggregate: true
    - name: GIT_REPO_UNAME
      description: git repo user name to push the code
      aggregate: true
    - name: GIT_REPO_PWD
      description: git repo user password to push the code
      aggregate: true

  key:
    - name: SIGNING_KEY
      description: the private PGP key required to digitally sign the application package
      private: true
      path: /

    - name: VERIFICATION_KEY
      description: the public PGP key required to open the application package
      path: /

profiles:
  - name: app
    description: packages the java application uber jar file
    default: true
    type: content/java
    run:
      # copy the docker file to build the jvm version to the artefact(target) package folder
      - cp _build/image/Dockerfile target/target/Dockerfile 
      # copy the build.yaml file to build the jvm version to the artefact(target) package folder
      - cp _build/image/build.yaml target/target
    target: target/target

functions:
  - name: build-app
    description: compiles and tests the application
    run:
      - mvn package -DskipTests=true
      - mvn test
      - mkdir target/target
      - cp target/${PROJECT_ARTIFACT_ID}-${PROJECT_ARTIFACT_VERSION}-runner.jar target/target
      - cp -r target/lib/. target/target/lib
    input:
      var:
        - PROJECT_ARTIFACT_ID
        - PROJECT_ARTIFACT_VERSION

  - name: publish-app
    description: packages and publishes the application
    run:
      - art build -t=${APP_PACKAGE_NAME} -p app
      - art push ${APP_PACKAGE_NAME} -u=${ART_REG_USER}:${ART_REG_PWD}
    input:
      var:
        - APP_PACKAGE_NAME
      secret:
        - ART_REG_USER
        - ART_REG_PWD
      key:
        # needs this binding to mount the key in the container
        - SIGNING_KEY

  - name: build-image
    run:
      # call shell script which contains commands to create buildconfig to build application image
      - sh start-build.sh ${BC_APPLICATION_NAME}
    input:
      var:
        - BC_APPLICATION_NAME
        - BC_BUILDER_IMAGE
        - BC_PUSH_IMAGE_REGISTRY
        - BC_PUSH_IMAGE_REPO
        - BC_PUSH_IMAGE_NAME
        - BC_PUSH_IMAGE_VERSION
        - BC_PULL_IMAGE_REGISTRY
        - BC_PACKAGE_NAME
        - BC_FX_NAME  
        - BC_CRYPTO_KEY_EMAIL
      secret:
        - BC_PULL_IMAGE_REGISTRY_UNAME
        - BC_PULL_IMAGE_REGISTRY_PWD
        - BC_PUSH_IMAGE_REGISTRY_UNAME
        - BC_PUSH_IMAGE_REGISTRY_PWD
        - BC_ART_REG_USER
        - BC_ART_REG_PWD
      key:
        - VERIFICATION_KEY

  - name: init-mvn
    description: initialises the project and creates pipelines
    runtime: java
    export: true
    run:
      # creates the quarkus scaffold for the project
      # the plugin version below might need upgrading if the current one is not available anymore
      - mvn io.quarkus:quarkus-maven-plugin:1.11.2.Final:create -DprojectGroupId=${PROJECT_GROUP_ID} -DprojectArtifactId=${PROJECT_ARTIFACT_ID} -DprojectVersion=${PROJECT_ARTIFACT_VERSION}
      # copy project files to the correct location
      - cp -r ${PROJECT_ARTIFACT_ID}/. .
      # remove old folder
      - rm -R ${PROJECT_ARTIFACT_ID}
    input:
      var:
        - PROJECT_GROUP_ID
        - PROJECT_ARTIFACT_ID
        - PROJECT_ARTIFACT_VERSION

  - name: init-git
    description: initialises the git repository
    runtime: java
    export: true
    run:
      - sh setup-git.sh ${GIT_REPO_HOST} ${GIT_REPO_UNAME} ${GIT_REPO_PWD}
      - git init
      - git config --global user.email "${GIT_REPO_EMAIL}"
      - git config --global user.name "${GIT_REPO_UNAME}"
      - git add .
      - git commit -m first_commit
      - git remote add origin ${GIT_URI}
      - git push -u origin master
    input:
      var:
        - GIT_URI
        - GIT_REPO_HOST
        - GIT_REPO_EMAIL
      secret:
        - GIT_REPO_UNAME
        - GIT_REPO_PWD

  - name: init-tkn
    description: create a tekton pipeline in openshift to build the application
    runtime: k8s
    export: true
    run:
      # create a tekton pipeline resources file
      - art flow merge -b . --tkn _build/flows/pipeline_bare.yaml
      # apply pipeline to OpenShift
      - oc apply -f _build/flows/pipeline_tkn.yaml
    input:
      key:
        - SIGNING_KEY
        - VERIFICATION_KEY
      secret:
        - SONAR_TOKEN
        - ART_REG_USER
        - ART_REG_PWD
        - BC_PULL_IMAGE_REGISTRY_UNAME
        - BC_PULL_IMAGE_REGISTRY_PWD
        - BC_PUSH_IMAGE_REGISTRY_UNAME
        - BC_PUSH_IMAGE_REGISTRY_PWD
        - BC_ART_REG_USER
        - BC_ART_REG_PWD
      var:
        - PROJECT_ARTIFACT_ID
        - PROJECT_ARTIFACT_VERSION
        - GIT_URI
        - SONAR_URI
        - SONAR_PROJECT_KEY
        - SONAR_SOURCES
        - SONAR_BINARIES
        - APP_PACKAGE_NAME
        - BC_APPLICATION_NAME
        - BC_BUILDER_IMAGE
        - BC_PUSH_IMAGE_REGISTRY
        - BC_PUSH_IMAGE_REPO
        - BC_PUSH_IMAGE_NAME
        - BC_PUSH_IMAGE_VERSION
        - BC_PULL_IMAGE_REGISTRY
        - BC_PACKAGE_NAME
        - BC_FX_NAME
        - BC_CRYPTO_KEY_EMAIL
...
