---
input:
  var:
    - name: ARTEFACT_NAME
      description: artefact registry name
      required: true
      type: string
    - name: PULL_IMAGE_REGISTRY
      description: application runtime image registry name
      required: true
      type: string
    - name: PUSH_IMAGE_REGISTRY
      description: application image registry name
      required: true
      type: string
    - name: PUSH_IMAGE_REPO
      description: application image repo name
      required: true
      type: string
    - name: PUSH_IMAGE_NAME
      description: application image name
      required: true
      type: string
    - name: PUSH_IMAGE_VERSION
      description: application image version/tag
      required: true
      type: string
    - name: CRYPTO_KEY_EMAIL
      description: email id which is used to genearte crypto signature keys
      required: true
      type: string

  secret:
    - name: PULL_IMAGE_REGISTRY_UNAME
      description: user name for the container registry where the base image is located
    - name: PULL_IMAGE_REGISTRY_PWD
      description: password for the container registry where the base image is located
    - name: PUSH_IMAGE_REGISTRY_UNAME
      description: user name for the container registry where the application image will be pushed
    - name: PUSH_IMAGE_REGISTRY_PWD
      description: password for the container registry where the application image will be pushed

functions:
  - name: build-image
    description: build application image & push into the image registry
    runtime: buildah
    export: true
    env:
      PRI_KEY_PATH: ${HOME}/.artisan/root_rsa_key.pgp
    run:
      # Download sap-equip-jvm artefacts from repo
      - art open -u=${ART_REG_USER}:${ART_REG_PWD} ${ARTEFACT_NAME} app
      - buildah login -u ${PULL_IMAGE_REGISTRY_UNAME} -p ${PULL_IMAGE_REGISTRY_PWD} ${PULL_IMAGE_REGISTRY}
      - buildah bud --isolation chroot -t ${PUSH_IMAGE_REGISTRY}/${PUSH_IMAGE_REPO}/${PUSH_IMAGE_NAME}:${PUSH_IMAGE_VERSION} .
      - gpg --import ${PRI_KEY_PATH}
      - skopeo copy --sign-by=${CRYPTO_KEY_EMAIL} --dest-tls-verify=false --dest-creds ${PUSH_IMAGE_REGISTRY_UNAME}:${PUSH_IMAGE_REGISTRY_PWD} containers-storage:${PUSH_IMAGE_REGISTRY}/${PUSH_IMAGE_REPO}/${PUSH_IMAGE_NAME}:${PUSH_IMAGE_VERSION} docker://${PUSH_IMAGE_REGISTRY}/${PUSH_IMAGE_REPO}/${PUSH_IMAGE_NAME}:${PUSH_IMAGE_VERSION}
    input:
      var:
        - ARTEFACT_NAME
        - PULL_IMAGE_REGISTRY
        - PUSH_IMAGE_REGISTRY
        - PUSH_IMAGE_REPO
        - PUSH_IMAGE_NAME
        - PUSH_IMAGE_VERSION
        - CRYPTO_KEY_EMAIL
      secret:
        - PULL_IMAGE_REGISTRY_UNAME
        - PULL_IMAGE_REGISTRY_PWD
        - PUSH_IMAGE_REGISTRY_UNAME
        - PUSH_IMAGE_REGISTRY_PWD
...
