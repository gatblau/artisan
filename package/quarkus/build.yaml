---
app_icon: quarkus

input:
  var:
    - name: GIT_URI
      required: true
      type: uri
      description: |-
        the URI of the project git repository. create empty git project and pass that uri here
        eg. https://gitlab.com/<group-name>/<project-name>.git

    - name: SONAR_URI
      required: true
      type: uri
      description: |-
        the URI of the SonarQube server to use for code quality reporting
        eg. https://<host-name>

    - name: SONAR_PROJECT_KEY
      required: true
      type: string
      description: |-
        the unique key identifying the project in the SonarQube server
        eg. net.atos:<app-name>

    - name: SONAR_SOURCES
      required: true
      type: path
      default: src/
      description: the path the sonar scanner should use to scan source code

    - name: SONAR_BINARIES
      required: true
      type: path
      default: target/classes
      description: the path the sonar scanner should use to scan binary files

    - name: APP_PACKAGE_NAME
      required: true
      type: name
      description: |-
        the name:tag for the application package to be published (e.g. registry-host/app-group/app-name)
        it contains artefacts built by the pipeline

    - name: PROJECT_GROUP_ID
      required: true
      type: string
      description: |-
        the maven group id for the project.

    - name: PROJECT_ARTIFACT_ID
      required: true
      type: string
      description: the maven artifact id for the application

    - name: PROJECT_ARTIFACT_VERSION
      required: true
      type: string
      default: 0.0.1
      description: the version of the application artifact

    # env variables required by build-image function
    - name: BC_APPLICATION_NAME
      required: true
      type: string
      description: the application name to create openshift tekton pipeline resources eg. EventListner & PipelineResources

    - name: BC_BUILDER_IMAGE
      required: true
      type: string
      description: the image builder name (buildah image) to build application image (eg quay.io/artisan/buildah)

    - name: BC_PUSH_IMAGE_REGISTRY
      required: true
      type: string
      description: |-
        the image registry name (eg. registry.gitlab.com)
        it's use to push application image into the image registry

    - name: BC_PUSH_IMAGE_REPO
      required: true
      type: string
      description: |-
        the image repo name
        repo name of the image registry where image to be pushed. if repo is created under user then it will be username
        if it's created inside the specific group then it would be a group name

    - name: BC_PUSH_IMAGE_NAME
      required: true
      type: string
      description: |-
        the application image name. it's a final image name that will be pushed into the img registry
        we can pass any name (eg. java-app)

    - name: BC_PUSH_IMAGE_VERSION
      required: true
      type: string
      description: |-
        the application image version/tag. it's a docker image tag used to identify the img uniquely

    - name: BC_PULL_IMAGE_REGISTRY
      required: true
      type: string
      description: |-
        application runtime image registry name (eg. registry.gitlab.com)
        this is the name of the image registry where base docker image is stored. it can be redhat, gitlab or quay registry

    - name: BC_PACKAGE_NAME
      required: true
      type: string
      description: |-
        the name for the application package that will be downloaded (e.g. registry-host/app-group/app-name)
        this package contains application artfacts, dockerfile & build.yaml file. it's used by image builder to build the application img

    - name: BC_FX_NAME
      required: true
      type: string
      description: |-
        the function name to build image (eg. build-image)
        this is the function name executed by the image builder. it contains commands to build, sign & push application img

    - name: BC_CRYPTO_KEY_EMAIL
      required: true
      type: string
      description: |-
        the email id which is used to generate crypto signature keys by using art cli
        this email id is used by img builder to sign the application image

    - name: GIT_REPO_EMAIL
      required: true
      type: string
      description: |-
        git user email id to push the quarkus scaffold code
        email id is used to get authenticate with the code repo

    - name: GIT_REPO_HOST
      required: true
      type: string
      description: |-
        git host to push the quarkus scaffold code (eg. gitlab.com)

    - name: PACKAGE_NAME
      required: true
      type: string
      description: |-
        the name:tag for the quarkus recepie package to download (e.g. registry-host/app-group/package-name)
        it contains setup & pipeline flow alongwith build.yaml file
        this package should be already available in the artefact registry like nexus

    - name: OPENSHIFT_NAMESPACE
      required: true
      type: string
      description: the name of the OpenShift namespace where the pipelines should be created

    - name: ART_RUNNER_URI
      required: true
      type: string
      description: the URI of the Artisan runner to use

  secret:
    - name: SONAR_TOKEN
      description: |-
        the token to access the sonar server
        open sonar dashboard -> click on My Account -> Security -> Genearte new token

    - name: BC_PULL_IMAGE_REGISTRY_UNAME
      description: user name for the container registry where the base image is located

    - name: BC_PULL_IMAGE_REGISTRY_PWD
      description: password for the container registry where the base image is located

    - name: BC_PUSH_IMAGE_REGISTRY_UNAME
      description: user name for the container registry where the application image will be pushed

    - name: BC_PUSH_IMAGE_REGISTRY_PWD
      description: password for the container registry where the application image will be pushed

    - name: BC_REGISTRY_USER
      description: artefact registry user name where artefact will be pushed

    - name: BC_REGISTRY_PWD
      description: artefact registry password where artefact will be pushed

    - name: GIT_REPO_UNAME
      description: |-
        git repo user name to push the code
        it's used to push the code generated by the quarkus scaffold

    - name: GIT_REPO_PWD
      description: |-
        git repo password to push the code
        it's used to push the code generated by the quarkus scaffold

    - name: QUARKUS_SETUP_CREATE_PROJECT_OXART_REG_USER
      description: user name for the container registry to download the recipe package

    - name: QUARKUS_SETUP_CREATE_PROJECT_OXART_REG_PWD
      description: password for the container registry to download the recipe package

    - name: ART_RUNNER_UNAME
      description: the user to authenticate with the Artisan Runner

    - name: ART_RUNNER_PWD
      description: the password to authenticate with the Artisan Runner

    - name: ART_REG_USER
      description: the user to authenticate with the Artisan Registry (used by Application publish-app function)

    - name: ART_REG_PWD
      description: the password to authenticate with the Artisan Registry (used by Application publish-app function)

  key:
    - name: SIGNING_KEY
      description: the private PGP key required to digitally sign the application package
      private: true
      path: /

    - name: VERIFICATION_KEY
      description: the public PGP key required to open the application package
      path: /

    - name: QUARKUS_SETUP_CREATE_PROJECT_OXART_VERIFICATION_KEY
      description: the public PGP key required to open the recipe package
      path: /

functions:
  - name: init-mvn
    description: initialises the project and creates pipelines
    runtime: java
    export: true
    run:
      # creates the quarkus scaffold for the project
      # the plugin version below might need upgrading if the current one is not available anymore
      - mvn io.quarkus:quarkus-maven-plugin:1.11.2.Final:create -DprojectGroupId=${PROJECT_GROUP_ID} -DprojectArtifactId=${PROJECT_ARTIFACT_ID} -DprojectVersion=${PROJECT_ARTIFACT_VERSION}
      # copy project files to the correct location
      - cp -r ${PROJECT_ARTIFACT_ID}/. ./app
      # remove old folder
      - rm -R ${PROJECT_ARTIFACT_ID}
    input:
      var:
        - PROJECT_GROUP_ID
        - PROJECT_ARTIFACT_ID
        - PROJECT_ARTIFACT_VERSION

  # this function is used by setup pipeline
  - name: init-git
    description: initialises the git repository
    runtime: java
    export: true
    run:
      - sh setup/setup-git.sh ${GIT_REPO_HOST} ${GIT_REPO_UNAME} ${GIT_REPO_PWD}
    input:
      var:
        - GIT_URI
        - GIT_REPO_HOST
        - GIT_REPO_EMAIL
      secret:
        - GIT_REPO_UNAME
        - GIT_REPO_PWD

  # this function is used by setup pipeline
  - name: init-tkn
    description: create a tekton pipeline in openshift to build the application
    runtime: ubi-min
    export: true
    run:
      # merge flow name into template
      - art merge setup/ci_flow_bare.yaml.tem
      # create a tekton pipeline resources file
      - art flow run -l namespace=${OPENSHIFT_NAMESPACE} -u=${ART_RUNNER_UNAME}:${ART_RUNNER_PWD} setup/ci_flow_bare.yaml -b app ${ART_RUNNER_URI}
    input:
      key:
        - SIGNING_KEY
        - VERIFICATION_KEY
      secret:
        - ART_REG_USER
        - ART_REG_PWD
        - SONAR_TOKEN
        - BC_PULL_IMAGE_REGISTRY_UNAME
        - BC_PULL_IMAGE_REGISTRY_PWD
        - BC_PUSH_IMAGE_REGISTRY_UNAME
        - BC_PUSH_IMAGE_REGISTRY_PWD
        - BC_REGISTRY_USER
        - BC_REGISTRY_PWD
        - ART_RUNNER_UNAME
        - ART_RUNNER_PWD
      var:
        - PROJECT_ARTIFACT_ID
        - PROJECT_ARTIFACT_VERSION
        - GIT_URI
        - SONAR_URI
        - SONAR_PROJECT_KEY
        - SONAR_SOURCES
        - SONAR_BINARIES
        - APP_PACKAGE_NAME
        - BC_APPLICATION_NAME
        - BC_BUILDER_IMAGE
        - BC_PUSH_IMAGE_REGISTRY
        - BC_PUSH_IMAGE_REPO
        - BC_PUSH_IMAGE_NAME
        - BC_PUSH_IMAGE_VERSION
        - BC_PULL_IMAGE_REGISTRY
        - BC_PACKAGE_NAME
        - BC_FX_NAME
        - BC_CRYPTO_KEY_EMAIL
        - OPENSHIFT_NAMESPACE
        - ART_RUNNER_URI

  - name: deploy-app
    description: deploys the Quarkus application to OpenShift
    runtime: k8s
    export: true
    run:
      # merges OpenShift template
      - art merge setup/deploy.yaml.tem
      # apply template
      - oc apply -f setup/deploy.yaml
    input:
      var:
        - BC_APPLICATION_NAME
        - BC_PUSH_IMAGE_REGISTRY
        - BC_PUSH_IMAGE_REPO
        - BC_PUSH_IMAGE_NAME
        - BC_PUSH_IMAGE_VERSION
        - PROJECT_ARTIFACT_VERSION

  # used this function on VM/local m/c to create the java-quarkus setup tekton pipeline into openshift
  - name: setup
    description: create a tekton pipeline in openshift to build, push the quarkus scaffold & create application pipeline
    runtime: ubi-min
    export: true
    run:
      - art merge setup/setup_flow_bare.yaml.tem
      - art flow run -l namespace=${OPENSHIFT_NAMESPACE} -u=${ART_RUNNER_UNAME}:${ART_RUNNER_PWD} setup/setup_flow_bare.yaml -b . ${ART_RUNNER_URI}
    input:
      key:
        - QUARKUS_SETUP_CREATE_PROJECT_OXART_VERIFICATION_KEY
        - SIGNING_KEY
        - VERIFICATION_KEY
      secret:
        - BC_REGISTRY_USER
        - BC_REGISTRY_PWD
        - BC_PULL_IMAGE_REGISTRY_PWD
        - BC_PULL_IMAGE_REGISTRY_UNAME
        - BC_PUSH_IMAGE_REGISTRY_PWD
        - BC_PUSH_IMAGE_REGISTRY_UNAME
        - GIT_REPO_PWD
        - GIT_REPO_UNAME
        - QUARKUS_SETUP_CREATE_PROJECT_OXART_REG_PWD
        - QUARKUS_SETUP_CREATE_PROJECT_OXART_REG_USER
        - SONAR_TOKEN
        - ART_RUNNER_UNAME
        - ART_RUNNER_PWD
      var:
        - APP_PACKAGE_NAME
        - BC_APPLICATION_NAME
        - BC_BUILDER_IMAGE
        - BC_CRYPTO_KEY_EMAIL
        - BC_FX_NAME
        - BC_PACKAGE_NAME
        - BC_PULL_IMAGE_REGISTRY
        - BC_PUSH_IMAGE_NAME
        - BC_PUSH_IMAGE_REGISTRY
        - BC_PUSH_IMAGE_REPO
        - BC_PUSH_IMAGE_VERSION
        - GIT_REPO_EMAIL
        - GIT_REPO_HOST
        - GIT_URI
        - PACKAGE_NAME
        - PROJECT_ARTIFACT_ID
        - PROJECT_ARTIFACT_VERSION
        - PROJECT_GROUP_ID
        - SONAR_BINARIES
        - SONAR_PROJECT_KEY
        - SONAR_SOURCES
        - SONAR_URI
        - OPENSHIFT_NAMESPACE
        - ART_RUNNER_URI

  - name: cleanup
    description: remove all resources created by setup
    run:
      - tkn pipeline delete --all -f
      - tkn pr delete --all -f
      - tkn tasks delete --all -f
      - tkn resources delete --all -f
      - oc delete -f setup/setup_flow_tkn.yaml
      - oc delete routes ${BC_APPLICATION_NAME}
      - oc delete services ${BC_APPLICATION_NAME}
      - oc delete imagestream ${BC_APPLICATION_NAME}
      - oc delete deploymentconfig ${BC_APPLICATION_NAME}
      - oc delete secrets quarkus-setup-creds-secret
      - oc delete secrets quarkus-setup-keys-secret
...
