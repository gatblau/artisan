---
app_icon: quarkus

input:
  var:
    - name: GIT_URI
      required: true
      type: uri
      description: |-
        the URI of the project git repository. create empty git project and pass that uri here
        eg. https://git-repo.com/<project-name>.git

    - name: SONAR_URI
      required: true
      type: uri
      description: |-
        the URI of the SonarQube server to use for code quality reporting
        eg. https://<host-name>

    - name: SONAR_PROJECT_KEY
      required: true
      type: string
      description: |-
        the unique key identifying the project in the SonarQube server
        eg. com.company.project

    - name: SONAR_SOURCES
      required: true
      type: path
      default: src/
      description: the path the sonar scanner should use to scan source code

    - name: SONAR_BINARIES
      required: true
      type: path
      default: target/classes
      description: the path the sonar scanner should use to scan binary files

    - name: APP_PACKAGE_NAME
      required: true
      type: name
      description: |-
        the name:tag for the application package to be published (e.g. registry-host/app-group/app-name)
        it contains artefacts built by the pipeline

    - name: PROJECT_GROUP_ID
      required: true
      type: string
      description: |-
        the maven group id for the project.

    - name: PROJECT_ARTIFACT_ID
      required: true
      type: string
      description: the maven artifact id for the application

    - name: PROJECT_ARTIFACT_VERSION
      required: true
      type: string
      default: 0.0.1
      description: the version of the application artifact

    # env variables required by build-image function
    - name: BC_APPLICATION_NAME
      required: true
      type: string
      description: the application name to create openshift tekton pipeline resources eg. EventListner & PipelineResources

    - name: BC_BUILDER_IMAGE
      required: true
      type: string
      description: the image builder name (buildah image) to build application image (eg quay.io/artisan/buildah)

    - name: BC_PUSH_IMAGE_REGISTRY
      required: true
      type: string
      description: |-
        the image registry name (eg. quay.io)
        it's use to push application image into the image registry

    - name: BC_PUSH_IMAGE_REPO
      required: true
      type: string
      description: |-
        the image repo name
        repo name of the image registry where image to be pushed. if repo is created under user then it will be username
        if it's created inside the specific group then it would be a group name

    - name: BC_PUSH_IMAGE_NAME
      required: true
      type: string
      description: |-
        the application image name. it's a final image name that will be pushed into the img registry
        we can pass any name (eg. java-app)

    - name: BC_PUSH_IMAGE_VERSION
      required: true
      type: string
      description: |-
        the application image version/tag. it's a docker image tag used to identify the img uniquely

    - name: BC_PULL_IMAGE_REGISTRY
      required: true
      type: string
      description: |-
        application runtime image registry name (eg. quay.io)
        this is the name of the image registry where base docker image is stored. it can be redhat, gitlab or quay registry

    - name: BC_PACKAGE_NAME
      required: true
      type: string
      description: |-
        the name for the application package that will be downloaded (e.g. registry-host/app-group/app-name)
        this package contains application artfacts, dockerfile & build.yaml file. it's used by image builder to build the application img

    - name: BC_FX_NAME
      required: true
      type: string
      description: |-
        the function name to build image (eg. build-image)
        this is the function name executed by the image builder. it contains commands to build, sign & push application img

    - name: BC_CRYPTO_KEY_EMAIL
      required: true
      type: string
      description: |-
        the email id which is used to generate crypto signature keys by using art cli
        this email id is used by img builder to sign the application image

    - name: GIT_REPO_EMAIL
      required: true
      type: string
      description: |-
        git user email id to push the quarkus scaffold code
        email id is used to get authenticate with the code repo

    - name: GIT_REPO_HOST
      required: true
      type: string
      description: |-
        git host to push the quarkus scaffold code (eg. git-repo.com)

    - name: PACKAGE_NAME
      required: true
      type: string
      description: |-
        the name:tag for the quarkus recepie package to download (e.g. registry-host/app-group/package-name)
        it contains setup & pipeline flow alongwith build.yaml file
        this package should be already available in the artefact registry like nexus

  secret:
    - name: ART_REG_USER
      description: the artisan registry user name which is deployed into the openshift

    - name: ART_REG_PWD
      description: the artisan registry password which is deployed into the openshift

    - name: SONAR_TOKEN
      description: |-
        the token to access the sonar server
        open sonar dashboard -> click on My Account -> Security -> Generate new token

    - name: BC_PULL_IMAGE_REGISTRY_UNAME
      description: user name for the container registry where the base image is located

    - name: BC_PULL_IMAGE_REGISTRY_PWD
      description: password for the container registry where the base image is located

    - name: BC_PUSH_IMAGE_REGISTRY_UNAME
      description: user name for the container registry where the application image will be pushed

    - name: BC_PUSH_IMAGE_REGISTRY_PWD
      description: password for the container registry where the application image will be pushed

    - name: BC_REGISTRY_USER
      description: artefact registry user name where artefact will be pushed

    - name: BC_REGISTRY_PWD
      description: artefact registry password where artefact will be pushed

    - name: GIT_REPO_UNAME
      description: |-
        git repo user name to push the code
        it's used to push the code generated by the quarkus scaffold

    - name: GIT_REPO_PWD
      description: |-
        git repo password to push the code
        it's used to push the code generated by the quarkus scaffold

    - name: JAVA_SETUP_CREATE_PROJECT_ART_REG_USER
      description: user name for the container registry to download the recipe package

    - name: JAVA_SETUP_CREATE_PROJECT_ART_REG_PWD
      description: password for the container registry to download the recipe package

  key:
    - name: SIGNING_KEY
      description: the private PGP key required to digitally sign the application package
      private: true
      path: /

    - name: VERIFICATION_KEY
      description: the public PGP key required to open the application package
      path: /

    - name: JAVA_SETUP_CREATE_PROJECT_VERIFICATION_KEY
      description: the public PGP key required to open the recipe package
      path: /

profiles:
  - name: app
    description: packages the java application uber jar file
    default: true
    type: content/java
    run:
      # copy the docker file to build the jvm version to the artefact(target) package folder
      - cp img/Dockerfile target/target/Dockerfile
      # copy the build.yaml file to build the jvm version to the artefact(target) package folder
      - cp img/build.yaml target/target
    target: target/target

functions:
  # this function is used by CI pipeline
  - name: build-app
    description: compiles and tests the application
    run:
      - mvn package -DskipTests=true
      - mvn test
      - mkdir target/target
      - cp target/${PROJECT_ARTIFACT_ID}-${PROJECT_ARTIFACT_VERSION}-runner.jar target/target
      - cp -r target/lib/. target/target/lib
    input:
      var:
        - PROJECT_ARTIFACT_ID
        - PROJECT_ARTIFACT_VERSION

  # this function is used by CI pipeline
  - name: publish-app
    description: packages and publishes the application
    run:
      - art build -t=${APP_PACKAGE_NAME} -p app
      - art push ${APP_PACKAGE_NAME} -u=${ART_REG_USER}:${ART_REG_PWD}
    input:
      var:
        - APP_PACKAGE_NAME
      secret:
        - ART_REG_USER
        - ART_REG_PWD
      key:
        # needs this binding to mount the key in the container
        - SIGNING_KEY

  # this function is used by CI pipeline
  - name: build-image
    run:
      # call shell script which contains commands to create buildconfig to build application image
      - sh start-build.sh ${BC_APPLICATION_NAME}
    input:
      var:
        - BC_APPLICATION_NAME
        - BC_BUILDER_IMAGE
        - BC_PUSH_IMAGE_REGISTRY
        - BC_PUSH_IMAGE_REPO
        - BC_PUSH_IMAGE_NAME
        - BC_PUSH_IMAGE_VERSION
        - BC_PULL_IMAGE_REGISTRY
        - BC_PACKAGE_NAME
        - BC_FX_NAME
        - BC_CRYPTO_KEY_EMAIL
      secret:
        - BC_PULL_IMAGE_REGISTRY_UNAME
        - BC_PULL_IMAGE_REGISTRY_PWD
        - BC_PUSH_IMAGE_REGISTRY_UNAME
        - BC_PUSH_IMAGE_REGISTRY_PWD
        - BC_REGISTRY_USER
        - BC_REGISTRY_PWD
      key:
        - VERIFICATION_KEY
...